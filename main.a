#include <iostream>
#include <windows.h>
#include <vector>
#include <array>
#include <chrono>

using namespace std;

class Canvas {
	int left, top, width, height;
	void cursorview(char show)
	{
		HANDLE hConsole;
		CONSOLE_CURSOR_INFO ConsoleCursor;

		hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

		ConsoleCursor.bVisible = show;
		ConsoleCursor.dwSize = 1;

		SetConsoleCursorInfo(hConsole, &ConsoleCursor);
	}
	void gotoxy(int x, int y) {
		COORD Pos;
		Pos.X = x;
		Pos.Y = y;
		SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
	}
public:
	Canvas(int x, int y, int w, int h) : left(x), top(y), width(w), height(h) {
		// 마우스 커서 제거
		cursorview(0);
	}
};

array<vector<int>, 7> blocks = {
	vector<int> { 0x00f0, 0x2222 }, // I
	vector<int> { 0x0270, 0x0232, 0x0072, 0x0262 }, // T
	vector<int> { 0x0660 }, // O
	vector<int> { 0x0360, 0x0231 }, // S
	vector<int> { 0x0c60, 0x04c8 }, // Z
	vector<int> { 0x0470, 0x0322, 0x0071, 0x0226 }, // J
	vector<int> { 0x02e0, 0x0446, 0x00e8, 0x0c44 } // L
};

class Block {
	int x, y;
	int type, rotation; // type 0~6, rotation blocks[type]
	int color; // 1~7
	array<array<int, 4>, 4> block = { 0, };
public:
	array<int, 2> getPos() { return { x,y }; }

	void init() {
		x = 3;
		y = -2;
		rotation = 0;
		type = 1; //random
		color = 1; //random
	}

	void create() {
		int number, hex, binary;
		//xmax = 0, ymax = 0;
		number = blocks[type][rotation];
		for (int i = 0; i < 4; i++) {
			if (hex = number % 16) {
				//ymax++;
			}
			for (int j = 0; j < 4; j++) {
				if (binary = hex % 2) {
					//xmax++;
				}
				block[3 - i][3 - j] = binary * color;
				if (hex /= 2) {
					//xmin++;
				}
			}
			number /= 16;
		}
	}

	int rangecheck() {

	}

	const auto& operator[] (int index) {
		return block[index];
	}

	void print() {
		for (auto row : block) {
			for (auto e : row) {
				printf("%d", e);
			}
			printf("\n");
		}
	}

};

class Board {
	array<array<int, 10>, 20> board = { 0, };
public:


	// 보드에 블럭 삽입
	int input(Block& block) {
		auto pos = block.getPos();
		int x = pos[0];
		int y = pos[1];

		// 블럭 참조, 보드에 삽입 시 오버플로우 가능성 있음
		for (int i = 0; i < 4; i++) {
			// 천장을 넘어간 블럭 스킵
			if (i + y < 0) continue;
			for (int j = 0; j < 4; j++) {
				// 블럭이
				if (block[i][j]) {
					// 바닥, 왼쪽 벽면, 오른쪽 벽면, 또는 기존 블럭과 닿은 경우
					if (i + y >= 20 || j + x < 0 || j + x >= 10 || board[i + y][j + x]) return 0;
					board[i + y][j + x] = block[i][j];
				}
			}
		}

		//정상 삽입
		return 1;
	}


	// 삽입 시 이전 상태의 자신의 블럭을 구분할 방법이 없으므로 view 함수 호출 이후 자신의 블럭은 지워줘야 함
	// 바닥에 닿은 경우, 이를 스킵하고 블럭 리셋
	void remove(Block& block) {
		auto pos = block.getPos();
		int x = pos[0];
		int y = pos[1];

		// 블럭 참조, input에서 충돌검사를 했으므로 순서대로 호출한다면 오버플로우 가능성 없음
		for (int i = 0; i < 4; i++) {
			// 범위를 넘어간 줄 스킵
			if (i + y < 0 || i + y >= 20) continue;
			for (int j = 0; j < 4; j++) {
				// 범위를 넘어간 칸 스킵
				if (j + x < 0 || j + x >= 10) continue;
				// 블럭값이 있다면, 삭제
				if (block[i][j]) board[i + y][j + x] = 0;
			}
		}
	}


	void print() {
		for (auto row : board) {
			for (auto e : row) {
				printf("%d", e);
			}
			printf("\n");
		}
	}

};

class Game {

};

void gotoxy(int x, int y) {
	COORD Pos;
	Pos.X = x;
	Pos.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}

int main() {
	Block block;
	block.init();
	block.create();

	Board board;
	board.input(block);
	
	chrono::time_point<chrono::high_resolution_clock> start = 
		chrono::high_resolution_clock::now();
	//-------------
	board.print();



	//-------------
	chrono::time_point<chrono::high_resolution_clock> end =
		chrono::high_resolution_clock::now();
	auto diff = end - start;
	cout << chrono::duration_cast<chrono::microseconds>(diff).count() << "ms" << endl;
}